import {
  core.c-int {c-int, from-c-int},
  core.c-long {c-long, from-c-long},
  core.c-size {C-Size, c-size, from-c-size},
  core.c-string {c-string, from-c-string, to-c-string},
  core.external {malloc},
  core.int {abs-int},
  core.int.io {print-int, print-int-line},
  core.int.show {show-int},
  core.magic,
  core.memory {load-int, store-int},
  core.pointer {null-pointer, shift},
  core.text {format, take},
  core.text.io {print-line},
  core.trick {panic},
  core.word,
}

inline clockid-t: type {
  introspect architecture {
  | arm64 =>
    c-int
  | amd64 =>
    c-int
  }
}

inline _c-time-t: type {
  introspect architecture {
  | arm64 =>
    int64
  | amd64 =>
    int64
  }
}

data c-time-t {
| C-Time(_c-time-t)
}

foreign {
  clock_gettime(clockid-t, pointer): c-int,
  localtime_r(pointer, pointer): pointer,
  gmtime_r(pointer, pointer): pointer,
  mktime(pointer): c-time-t,
  timegm(pointer): c-time-t,
  snprintf(pointer, c-size, pointer): c-int,
  sprintf(pointer, pointer): c-int,
  strptime(pointer, pointer, pointer): pointer,
  neut_time_v0_4_sizeof_struct_tm(): c-size,
  neut_time_v0_4_parse_iso8601(pointer, pointer): int32,
  neut_time_v0_4_CLOCK_REALTIME(): clockid-t,
}

inline SIZEOF_STRUCT_TM: c-size {
  magic opaque-value {
    magic external neut_time_v0_4_sizeof_struct_tm()
  }
}

inline CLOCK_REALTIME: clockid-t {
  magic opaque-value {
    magic external neut_time_v0_4_CLOCK_REALTIME()
  }
}

data time {
| Time(
    seconds: int,
    nanoseconds: int,
  )
}

data clock {
| Clock(
    nanoseconds: int,
    seconds: int,
    minutes: int,
    hours: int,
    day: int,
    month: int,
    year: int,
    weekday: int,
    yearday: int,
    is-dst: bool,
    gmt-offset: int,
    timezone: text,
  )
}

define _encode-dst(x: int): bool {
  if eq-int(x, 0) {
    False
  } else {
    True
  }
}

define _decode-dst(x: bool): int {
  if x {
    1
  } else {
    0
  }
}

define _zext-load-int32(address: pointer): int {
  zext-int32-int(magic load(int32, address))
}

define _load-c-long(address: pointer): int {
  from-c-long(magic load(c-long, address))
}

define _from-time(t: time, interpreter: (pointer, pointer) -> pointer): clock {
  let Time of {seconds, nanoseconds} = t;
  let struct = magic alloca(int8, 16);
  store-int(seconds, struct);
  store-int(nanoseconds, shift(struct, 8));
  let size = from-c-size(SIZEOF_STRUCT_TM);
  let buffer = magic alloca(int8, size);
  let localtime = interpreter(struct, buffer);
  let nanoseconds = load-int(shift(struct, 8));
  let seconds = _zext-load-int32(localtime);
  let minutes = _zext-load-int32(shift(localtime, 4));
  let hours = _zext-load-int32(shift(localtime, 8));
  let day = _zext-load-int32(shift(localtime, 12));
  let month = add-int(1, _zext-load-int32(shift(localtime, 16)));
  let year = add-int(1900, _zext-load-int32(shift(localtime, 20)));
  let weekday = _zext-load-int32(shift(localtime, 24));
  let yearday = _zext-load-int32(shift(localtime, 28));
  let is-dst = _encode-dst(_zext-load-int32(shift(localtime, 32)));
  let gmt-offset = _load-c-long(shift(localtime, 40));
  let timezone = from-c-string(magic cast(pointer, &c-string, magic load(pointer, shift(localtime, 48))));
  Clock of {
    nanoseconds,
    seconds,
    minutes,
    hours,
    day,
    month,
    year,
    weekday,
    yearday,
    is-dst,
    gmt-offset,
    timezone,
  }
}

define _from-clock(t: clock, interpreter: (pointer) -> c-time-t): time {
  let
    Clock of {
      nanoseconds,
      seconds,
      minutes,
      hours,
      day,
      month,
      year,
      weekday,
      yearday,
      is-dst,
      gmt-offset,
      timezone,
    }
  = t;
  pin timezone = timezone;
  pin timezone' = to-c-string(timezone);
  let struct = magic alloca(int8, 56);
  store-int(seconds, struct);
  store-int(minutes, shift(struct, 4));
  store-int(hours, shift(struct, 8));
  store-int(day, shift(struct, 12));
  store-int(sub-int(month, 1), shift(struct, 16));
  store-int(sub-int(year, 1900), shift(struct, 20));
  store-int(weekday, shift(struct, 24));
  store-int(yearday, shift(struct, 28));
  store-int(_decode-dst(is-dst), shift(struct, 32));
  store-int(gmt-offset, shift(struct, 40));
  store-int(core.magic.cast(&c-string, int, timezone'), shift(struct, 48));
  let _ = timezone;
  let _ = timezone';
  let C-Time(seconds) = interpreter(struct);
  Time of {seconds, nanoseconds}
}

define get-time(): time {
  let struct = magic alloca(int8, 16);
  let result = from-c-int(magic external clock_gettime(CLOCK_REALTIME, struct));
  if lt-int(result, 0) {
    panic("time.time.get-time(); `clock_gettime` failed\n")
  } else {
    let seconds: int = load-int(struct);
    let nanoseconds: int = load-int(shift(struct, 8));
    Time of {nanoseconds, seconds}
  }
}

define _mktime(ptr: pointer): c-time-t {
  magic external mktime(ptr)
}

define _timegm(ptr: pointer): c-time-t {
  magic external timegm(ptr)
}

define _localtime_r(ptr: pointer, buffer: pointer): pointer {
  magic external localtime_r(ptr, buffer)
}

define _gmtime_r(ptr: pointer, buffer: pointer): pointer {
  magic external gmtime_r(ptr, buffer)
}

define from-local-clock(t: clock): time {
  _from-clock(t, _mktime)
}

define from-UTC-clock(t: clock): time {
  _from-clock(t, _timegm)
}

define to-local-clock(t: time): clock {
  _from-time(t, _localtime_r)
}

define to-UTC-clock(t: time): clock {
  _from-time(t, _gmtime_r)
}

define _zeropad(x: int, format-text: &text): text {
  pin fmt = to-c-string(format-text);
  let fmt = magic cast(&c-string, pointer, fmt);
  let size = from-c-int(magic external snprintf(null-pointer, 0, fmt)(x: int));
  let ptr = malloc(C-Size(add-int(size, add-int(1, mul-int(core.word.size, 2)))));
  store-int(0, ptr);
  store-int(size, shift(ptr, core.word.size));
  let buffer = shift(ptr, mul-int(core.word.size, 2));
  let _ = magic external sprintf(buffer, fmt)(x: int);
  magic cast(pointer, text, ptr)
}

define _zeropad2(x: int): text {
  _zeropad(x, "%02ld")
}

define _zeropad9(x: int): text {
  _zeropad(x, "%09ld")
}

define _format-nanoseconds(nanoseconds: int, digits: int): text {
  if gt-int(digits, 0) {
    let result = _zeropad9(nanoseconds);
    format(".{}", List[take(result, digits)])
  } else {
    core.text.empty()
  }
}

define _format-gmt-offset(offset: int): text {
  if lt-int(offset, 0) {
    let offset = mul-int(offset, -1);
    let hours = div-int(offset, mul-int(60, 60));
    let minutes = div-int(rem-int(offset, mul-int(60, 60)), 60);
    format("-{}:{}", List[_zeropad2(hours), _zeropad2(minutes)])
  } else-if lt-int(0, offset) {
    let hours = div-int(offset, mul-int(60, 60));
    let minutes = div-int(rem-int(offset, mul-int(60, 60)), 60);
    format("+{}:{}", List[_zeropad2(hours), _zeropad2(minutes)])
  } else {
    *"Z"
  }
}

inline _to-ISO8601(ts: time, nanosecond-digits: int, to-clock: (time) -> clock): text {
  let t = to-clock(ts);
  let Clock of {nanoseconds, seconds, minutes, hours, day, month, year, gmt-offset} = t;
  format("{}-{}-{}T{}:{}:{}{}{}", List[
    show-int(year),
    _zeropad2(month),
    _zeropad2(day),
    _zeropad2(hours),
    _zeropad2(minutes),
    _zeropad2(seconds),
    _format-nanoseconds(nanoseconds, nanosecond-digits),
    _format-gmt-offset(gmt-offset),
  ])
}

define to-ISO8601-local(ts: time, nanosecond-digits: int): text {
  _to-ISO8601(ts, nanosecond-digits, to-local-clock)
}

define to-ISO8601-UTC(ts: time, nanosecond-digits: int): text {
  _to-ISO8601(ts, nanosecond-digits, to-UTC-clock)
}

define from-ISO8601(datetime-text: &text): ?time {
  let time-struct = magic alloca(int8, 16);
  pin datetime-text' = to-c-string(datetime-text);
  let datetime-text' = magic cast(&c-string, pointer, datetime-text');
  let result: int32 = magic external neut_time_v0_4_parse_iso8601(datetime-text', time-struct);
  let seconds = load-int(time-struct);
  let nanoseconds = load-int(shift(time-struct, 8));
  if ge-int32(result, 0) {
    Right(Time of {seconds, nanoseconds})
  } else {
    none
  }
}

define show-time(m: time, decimals: int): text {
  let Time of {seconds := s, nanoseconds := ns} = m;
  format("{}{}", List[show-int(s), _format-nanoseconds(ns, decimals)])
}

define _time-as-int(m: time): int {
  let Time of {seconds := s, nanoseconds := ns} = m;
  if lt-int(0, s) {
    add-int(mul-int(s, 1000000000), ns)
  } else {
    let s' = mul-int(-1, s);
    mul-int(-1, add-int(mul-int(s', 1000000000), ns))
  }
}

define add-time(m1: time, m2: time): time {
  let v1 = _time-as-int(m1);
  let v2 = _time-as-int(m2);
  let v = add-int(v1, v2);
  Time of {
    seconds := div-int(v, 1000000000),
    nanoseconds := abs-int(rem-int(v, 1000000000)),
  }
}

define sub-time(m1: time, m2: time): time {
  let Time of {seconds := s2, nanoseconds := ns2} = m2;
  add-time(m1, Time of {seconds := mul-int(-1, s2), nanoseconds := ns2})
}

inline _cmp-time(m1: time, m2: time, !cmp: (int, int) -> bool): bool {
  let Time of {seconds := s1, nanoseconds := ns1} = m1;
  let Time of {seconds := s2, nanoseconds := ns2} = m2;
  if !cmp(s1, s2) {
    !cmp(ns1, ns2)
  } else {
    False
  }
}

define eq-time(m1: time, m2: time): bool {
  _cmp-time(m1, m2, eq-int)
}

define lt-time(m1: time, m2: time): bool {
  _cmp-time(m1, m2, lt-int)
}

define le-time(m1: time, m2: time): bool {
  _cmp-time(m1, m2, le-int)
}

define gt-time(m1: time, m2: time): bool {
  _cmp-time(m1, m2, gt-int)
}

define ge-time(m1: time, m2: time): bool {
  _cmp-time(m1, m2, ge-int)
}

define now(): text {
  to-ISO8601-local(get-time(), 6)
}

define zen(): unit {
  pin t = show-time(get-time(), 3);
  print-line(t);
  let !test-ts = Time of {seconds := 123453234, nanoseconds := 56789};
  let Clock of {minutes, seconds} = to-UTC-clock(from-UTC-clock(to-UTC-clock(!test-ts)));
  pin time-text = to-ISO8601-UTC(!test-ts, 6);
  print-line(time-text);
  print("minutes: ");
  print-int(minutes);
  print(", seconds: ");
  print-int-line(seconds);
  pin now-text = now();
  print-line(now-text);
  // printf("minutes: {}, seconds: {}\n", [show-int(minutes), show-int(seconds)]);
  // printf("now: {}\n", [now()]);
  match from-ISO8601("2024-05-27T11:11:40.553393+09:00") {
  | Right(!ts) =>
    let calc-t = sub-time(add-time(!ts, !ts), !ts);
    pin time-text' = to-ISO8601-UTC(calc-t, 6);
    print-line(time-text')
  | Left(_) =>
    print("failed to parse\n")
  }
}

define main(): unit {
  zen()
}
