import {
  core.c-int {c-int, from-c-int},
  core.c-size {C-Size, c-size},
  core.c-string {c-string, from-c-string, to-c-string},
  core.external {malloc},
  core.int {abs-int},
  core.int.show {show-int},
  core.magic,
  core.memory {load-int, store-int},
  core.pointer {null-pointer, shift},
  core.system {panic},
  core.text {format, take},
  core.word,
}

constant clockid-t: type {
  introspect arch {
  | arm64 =>
    c-int
  | amd64 =>
    c-int
  }
}

constant _c-time-t: type {
  introspect arch {
  | arm64 =>
    int64
  | amd64 =>
    int64
  }
}

data c-time-t {
| C-Time(_c-time-t)
}

foreign {
  clock_gettime(clockid-t, pointer): c-int,
  localtime(pointer): pointer,
  gmtime(pointer): pointer,
  mktime(pointer): c-time-t,
  timegm(pointer): c-time-t,
  snprintf(pointer, c-size, pointer): c-int,
  sprintf(pointer, pointer): c-int,
  strptime(pointer, pointer, pointer): pointer,
  neut_time_v0_4_parse_iso8601(pointer, pointer): int32,
  neut_time_v0_4_CLOCK_REALTIME(): clockid-t,
}

constant CLOCK_REALTIME: clockid-t {
  magic external neut_time_v0_4_CLOCK_REALTIME()
}

data time {
| Time(
    seconds: int,
    nanoseconds: int,
  )
}

data clock {
| Clock(
    nanoseconds: int,
    seconds: int,
    minutes: int,
    hours: int,
    day: int,
    month: int,
    year: int,
    weekday: int,
    yearday: int,
    is-dst: bool,
    gmt-offset: int,
    timezone: text,
  )
}

define _encode-dst(x: int): bool {
  if eq-int(x, 0) {
    False
  } else {
    True
  }
}

define _decode-dst(x: bool): int {
  if x {
    1
  } else {
    0
  }
}

define _from-time(t: time, interpreter: (pointer) -> pointer): clock {
  let Time of {seconds, nanoseconds} = t in
  let struct = magic alloca(int8, 16) in
  store-int(seconds, struct);
  store-int(nanoseconds, shift(struct, 8));
  let localtime = interpreter(struct) in
  let nanoseconds: int = load-int(shift(struct, 8)) in
  let seconds: int = magic load(int32, localtime) in
  let minutes: int = magic load(int32, shift(localtime, 4)) in
  let hours: int = magic load(int32, shift(localtime, 8)) in
  let day: int = magic load(int32, shift(localtime, 12)) in
  let month: int = add-int(1, magic load(int32, shift(localtime, 16))) in
  let year: int = add-int(1900, magic load(int32, shift(localtime, 20))) in
  let weekday: int = magic load(int32, shift(localtime, 24)) in
  let yearday: int = magic load(int32, shift(localtime, 28)) in
  let is-dst = _encode-dst(magic load(int32, shift(localtime, 32))) in
  let gmt-offset: int = magic load(int32, shift(localtime, 40)) in
  let timezone: text = from-c-string(magic load(int, shift(localtime, 48))) in
  Clock of {
    nanoseconds,
    seconds,
    minutes,
    hours,
    day,
    month,
    year,
    weekday,
    yearday,
    is-dst,
    gmt-offset,
    timezone,
  }
}

define _from-clock(t: clock, interpreter: (pointer) -> c-time-t): time {
  use t {
    nanoseconds,
    seconds,
    minutes,
    hours,
    day,
    month,
    year,
    weekday,
    yearday,
    is-dst,
    gmt-offset,
    timezone,
  }
  in
  pin timezone = timezone in
  pin timezone' = to-c-string(timezone) in
  let struct = magic alloca(int8, 56) in
  store-int(seconds, struct);
  store-int(minutes, shift(struct, 4));
  store-int(hours, shift(struct, 8));
  store-int(day, shift(struct, 12));
  store-int(sub-int(month, 1), shift(struct, 16));
  store-int(sub-int(year, 1900), shift(struct, 20));
  store-int(weekday, shift(struct, 24));
  store-int(yearday, shift(struct, 28));
  store-int(_decode-dst(is-dst), shift(struct, 32));
  store-int(gmt-offset, shift(struct, 40));
  store-int(core.magic.cast(&c-string, int, timezone'), shift(struct, 48));
  let _ = timezone in
  let _ = timezone' in
  let C-Time(seconds) = interpreter(struct) in
  Time of {seconds, nanoseconds}
}

define get-time(): time {
  let struct = magic alloca(int8, 16) in
  let result = from-c-int(magic external clock_gettime(CLOCK_REALTIME, struct)) in
  if lt-int(result, 0) {
    panic("time.time.get-time(); `clock_gettime` failed\n")
  } else {
    let seconds: int = load-int(struct) in
    let nanoseconds: int = load-int(shift(struct, 8)) in
    Time of {nanoseconds, seconds}
  }
}

define _mktime(ptr: pointer): c-time-t {
  magic external mktime(ptr)
}

define _timegm(ptr: pointer): c-time-t {
  magic external timegm(ptr)
}

define _localtime(ptr: pointer): pointer {
  magic external localtime(ptr)
}

define _gmtime(ptr: pointer): pointer {
  magic external gmtime(ptr)
}

define from-local-clock(t: clock): time {
  _from-clock(t, _mktime)
}

define from-UTC-clock(t: clock): time {
  _from-clock(t, _timegm)
}

define to-local-clock(t: time): clock {
  _from-time(t, _localtime)
}

define to-UTC-clock(t: time): clock {
  _from-time(t, _gmtime)
}

define _zeropad(x: int, format-text: &text): text {
  pin fmt = to-c-string(format-text) in
  let fmt = magic cast(&c-string, pointer, fmt) in
  let size = from-c-int(magic external snprintf(null-pointer, C-Size(0), fmt)(x: int)) in
  let ptr = malloc(C-Size(add-int(size, add-int(1, mul-int(core.word.size, 2))))) in
  store-int(0, ptr);
  store-int(size, shift(ptr, core.word.size));
  let buffer = shift(ptr, mul-int(core.word.size, 2)) in
  let _ = magic external sprintf(buffer, fmt)(x: int) in
  magic cast(pointer, text, ptr)
}

define _zeropad2(x: int): text {
  _zeropad(x, "%02ld")
}

define _zeropad9(x: int): text {
  _zeropad(x, "%09ld")
}

define _format-nanoseconds(nanoseconds: int, digits: int): text {
  if gt-int(digits, 0) {
    let result = _zeropad9(nanoseconds) in
    format(".{}", [take(result, digits)])
  } else {
    core.text.empty()
  }
}

define _format-gmt-offset(offset: int): text {
  if lt-int(offset, 0) {
    let offset = mul-int(offset, -1) in
    let hours = div-int(offset, mul-int(60, 60)) in
    let minutes = div-int(rem-int(offset, mul-int(60, 60)), 60) in
    format("-{}:{}", [_zeropad2(hours), _zeropad2(minutes)])
  } else-if lt-int(0, offset) {
    let hours = div-int(offset, mul-int(60, 60)) in
    let minutes = div-int(rem-int(offset, mul-int(60, 60)), 60) in
    format("+{}:{}", [_zeropad2(hours), _zeropad2(minutes)])
  } else {
    *"Z"
  }
}

inline _to-ISO8601(ts: time, nanosecond-digits: int, to-clock: (time) -> clock): text {
  let t = to-clock(ts) in
  let Clock of {nanoseconds, seconds, minutes, hours, day, month, year, gmt-offset} = t in
  format("{}-{}-{}T{}:{}:{}{}{}", [
    show-int(year),
    _zeropad2(month),
    _zeropad2(day),
    _zeropad2(hours),
    _zeropad2(minutes),
    _zeropad2(seconds),
    _format-nanoseconds(nanoseconds, nanosecond-digits),
    _format-gmt-offset(gmt-offset),
  ])
}

define to-ISO8601-local(ts: time, nanosecond-digits: int): text {
  _to-ISO8601(ts, nanosecond-digits, to-local-clock)
}

define to-ISO8601-UTC(ts: time, nanosecond-digits: int): text {
  _to-ISO8601(ts, nanosecond-digits, to-UTC-clock)
}

define from-ISO8601(datetime-text: &text): ?time {
  let time-struct = magic alloca(int8, 16) in
  pin datetime-text' = to-c-string(datetime-text) in
  let datetime-text' = magic cast(&c-string, pointer, datetime-text') in
  let result: int32 = magic external neut_time_v0_4_parse_iso8601(datetime-text', time-struct) in
  let seconds = load-int(time-struct) in
  let nanoseconds = load-int(shift(time-struct, 8)) in
  if ge-int32(result, 0) {
    Right(Time of {seconds, nanoseconds})
  } else {
    none()
  }
}

define show-time(m: time): text {
  let Time of {seconds = s, nanoseconds = ns} = m in
  format("{}{}", [show-int(s), _format-nanoseconds(ns, 9)])
}

define _time-as-int(m: time): int {
  let Time of {seconds = s, nanoseconds = ns} = m in
  if lt-int(0, s) {
    add-int(mul-int(s, 1000000000), ns)
  } else {
    let s' = mul-int(-1, s) in
    mul-int(-1, add-int(mul-int(s', 1000000000), ns))
  }
}

define add-time(m1: time, m2: time): time {
  let v1 = _time-as-int(m1) in
  let v2 = _time-as-int(m2) in
  let v = add-int(v1, v2) in
  Time of {
    seconds = div-int(v, 1000000000),
    nanoseconds = abs-int(rem-int(v, 1000000000)),
  }
}

define sub-time(m1: time, m2: time): time {
  let Time of {seconds = s2, nanoseconds = ns2} = m2 in
  add-time(m1, Time of {seconds = mul-int(-1, s2), nanoseconds = ns2})
}

inline _cmp-time(m1: time, m2: time, !cmp: (int, int) -> bool): bool {
  let Time of {seconds = s1, nanoseconds = ns1} = m1 in
  let Time of {seconds = s2, nanoseconds = ns2} = m2 in
  if !cmp(s1, s2) {
    !cmp(ns1, ns2)
  } else {
    False
  }
}

define eq-time(m1: time, m2: time): bool {
  _cmp-time(m1, m2, eq-int)
}

define lt-time(m1: time, m2: time): bool {
  _cmp-time(m1, m2, lt-int)
}

define le-time(m1: time, m2: time): bool {
  _cmp-time(m1, m2, le-int)
}

define gt-time(m1: time, m2: time): bool {
  _cmp-time(m1, m2, gt-int)
}

define ge-time(m1: time, m2: time): bool {
  _cmp-time(m1, m2, ge-int)
}

define now(): text {
  to-ISO8601-local(get-time(), 6)
}

define zen(): unit {
  let !test-ts = Time of {seconds = 123453234, nanoseconds = 56789} in
  let Clock of {minutes, seconds} = to-UTC-clock(!test-ts) in
  printf("{}\n", [to-ISO8601-UTC(!test-ts, 6)]);
  printf("minutes: {}, seconds: {}\n", [show-int(minutes), show-int(seconds)]);
  printf("now: {}\n", [now()]);
  match from-ISO8601("2024-05-27T11:11:40.553393+09:00") {
  | Right(ts) =>
    printf("{}\n", [to-ISO8601-UTC(ts, 6)])
  | Left(_) =>
    print("failed to parse\n")
  }
}

define main(): unit {
  zen()
}
